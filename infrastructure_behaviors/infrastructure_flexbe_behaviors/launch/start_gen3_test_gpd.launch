<launch>

    <!-- Data Collection Args -->
    <arg name="collect_data" default="false" />
    <arg name="video" default="false" />
    <arg name="name" default="infrastructure_trial" />
    <arg name="robot_jointState_topic" default="/" />

    <!-- Robot Args -->
    <arg name="robot_ip" default="192.168.2.201" />
    <arg name="robot_model" default="gen3" />
    <arg name="namespace" default="my_gen3" />
    <arg name="gpd_cloud_topic" default="/combined_cloud" />

    <!-- Data Collection Params -->
    <param name="test_name" type="string" value="$(arg name)" />
    <param name="record_video" type="boolean" value="$(arg video)" />
    <param name="record_trial_rosbags" type="boolean" value="$(arg collect_data)" />
    <param name="robot_joints" type="string" value="$(arg robot_jointState_topic)" />

    <!-- Robot Params -->
    <rosparam file="$(find infrastructure_flexbe_behaviors)/cfg/$(arg robot_model)_moveit_params.yaml" />

    <!-- Full Flexbe App Bringup -->
    <include file="$(find flexbe_app)/launch/flexbe_full.launch" />

    <!-- Kinova Robot Bringup -->
    <include file="$(find kortex_driver)/launch/kortex_driver.launch" >
        <arg name="ip_address" value="$(arg robot_ip)" />
        <arg name="gripper" value="" />
    </include>

    <include file="$(find kinova_vision)/launch/kinova_vision.launch" >
        <arg name="device" value="$(arg robot_ip)" />
    </include>

    <!-- GPD Node -->
    <node name="detect_grasps" pkg="gpd_ros" type="detect_grasps" respawn="true">
        <!-- If sequential importance sampling is used (default: false) -->
        <param name="use_importance_sampling" value="false" />
        <!-- What type of point cloud is used and what ROS topic it comes from -->
        <param name="cloud_type" value="0" /> <!-- 0: PointCloud2, 1: CloudIndexed, 2: CloudSamples -->
        <!-- <param name="cloud_topic" value="$(eval '/' + arg('namespace') + arg('gpd_cloud_topic'))" /> -->
        <param name="cloud_topic" value="$(arg gpd_cloud_topic)" />
        <!-- (optional) The ROS topic that the samples come from (default: an empty string) -->
        <param name="samples_topic" value="" />
        <!-- Filepath to the configuration file for GPD -->
        <param name="config_file" value="/root/infrastructure_ws/src/gpd/cfg/ros_eigen_params.cfg" />
        <!-- <param name="config_file" value="$(find armada_flexbe_utilities)/cfg/ros_vino_params.cfg" /> -->
        <param name="rviz_topic" value="grasps_rviz" />
    </node>

    <!-- Data Collection Nodes -->
    <node pkg="data_collection" name="data_collection" type="data_collection.py" output="screen"/>

    <!-- MoveIt Utility Nodes --> 
    <node name="gpd_grasp_candidates_service" pkg="armada_flexbe_utilities" type="gpd_grasp_candidates_service" output="screen" respawn="true"/>
    <node name="gpd_grasp_waypoint_service" pkg="armada_flexbe_utilities" type="gpd_grasp_waypoint_service" output="screen" respawn="true"/>

    <group ns="$(arg namespace)">
        <node name="move_arm_cpp_server" pkg="armada_flexbe_utilities" type="move_arm_cpp_server" output="screen" />
        <node name="spawn_collision_service" pkg="armada_flexbe_utilities" type="spawn_collision_service" output="screen" respawn="true"/>
    </group>

    <!-- PCL Utility Nodes -->
    <node name="get_pointcloud_service" pkg="armada_flexbe_utilities" type="get_pointcloud_service" output="screen" respawn="true"/>
    <node name="pcl_concatenate_pointcloud_service" pkg="armada_flexbe_utilities" type="pcl_concatenate_pointcloud_service" output="screen" respawn="true"/>
    <node name="pcl_conditional_outlier_removal_service" pkg="armada_flexbe_utilities" type="pcl_conditional_outlier_removal_service" output="screen" respawn="true"/>
    <node name="pcl_euclidean_cluster_extraction_service" pkg="armada_flexbe_utilities" type="pcl_euclidean_cluster_extraction_service" output="screen" respawn="true"/>
    <node name="pcl_passthrough_filter_service" pkg="armada_flexbe_utilities" type="pcl_passthrough_filter_service" output="screen" respawn="true"/>
    <node name="pcl_plane_segmentation_service" pkg="armada_flexbe_utilities" type="pcl_plane_segmentation_service" output="screen" respawn="true"/>
    <node name="pcl_radius_outlier_removal_service" pkg="armada_flexbe_utilities" type="pcl_radius_outlier_removal_service" output="screen" respawn="true"/>
    <node name="pcl_statistical_outlier_removal_service" pkg="armada_flexbe_utilities" type="pcl_statistical_outlier_removal_service" output="screen" respawn="true"/>
    <node name="pcl_voxel_grid_filter_service" pkg="armada_flexbe_utilities" type="pcl_voxel_grid_filter_service" output="screen" respawn="true"/>

</launch>